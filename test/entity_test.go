package test

import (
	"fmt"
	"github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"
	"os"
	"path/filepath"
	"testing"
	"time"
)

var skipMap = map[string]bool{
	"id":        true,
	"create_at": true,
	"create_by": true,
	"modify_at": true,
	"modify_by": true,
	"deleted":   true,
}

func canSkip(col string) bool {
	return skipMap[col]
}

func genDeclEntityStruct(table string, columns []Column) jen.Code {
	camel := strcase.ToCamel(table)
	var codes []jen.Code
	if hasColumn("id", columns) {
		codes = append(codes, jen.Op("*").Id("IDInfo"))
	}
	for _, column := range columns {
		if canSkip(column.ColumnName) {
			continue
		}
		ct := TypeMappingMysqlToGo[column.Type]
		if ct == "time.Time" {
			codes = append(codes, jen.Id(strcase.ToCamel(column.ColumnName)).Op("*").Add(useTime("Time")))
			continue
		}
		codes = append(codes, jen.Id(strcase.ToCamel(column.ColumnName)).Op("*").Add(jen.Id(ct)))
	}
	if hasColumn("create_at", columns) {
		codes = append(codes, jen.Op("*").Id("CreateInfo"))
	}
	if hasColumn("modify_at", columns) {
		codes = append(codes, jen.Op("*").Id("ModifyInfo"))
	}
	if hasColumn("deleted", columns) {
		codes = append(codes, jen.Op("*").Id("DeletedInfo"))
	}
	return jen.Type().Id(camel).Struct(codes...)
}

func genDeclFuncNewAccount(table string, columns []Column) jen.Code {
	camel := strcase.ToCamel(table)
	return jen.Func().Id("New" + camel).Params().Params(jen.Op("*").Id(camel)).Block(jen.Return().Op("&").Id(camel).Values())
}

func genDeclFuncFrom(table string, columns []Column) jen.Code {
	camel := strcase.ToCamel(table)
	return jen.Func().Params(jen.Id("rec").Op("*").Id(camel)).
		Id("From").Params(jen.Id("from").Id("any")).Params(jen.Id("error")).Block(
		jen.Id("err").Op(":=").Add(useCopier("Copy")).Call(
			jen.Id("rec"),
			jen.Id("from"),
		),
		jen.Return().Id("err"),
	)
}

func genDeclFuncInto(table string, columns []Column) jen.Code {
	camel := strcase.ToCamel(table)
	return jen.Func().Params(jen.Id("rec").Op("*").Id(camel)).Id("Into").
		Params(jen.Id("into").Op("*").Id("any")).Params(jen.Id("error")).Block(
		jen.Id("err").Op(":=").Add(useCopier("Copy")).Call(
			jen.Id("into"),
			jen.Id("rec"),
		),
		jen.Return().Id("err"),
	)
}

func genEntityFile(table string, columns []Column) *jen.File {
	f := jen.NewFile("entity")
	f.ImportName("context", "context")
	f.ImportName("database/sql", "sql")
	f.ImportName("errors", "errors")
	f.ImportName("fmt", "fmt")
	f.ImportName("time", "time")
	f.ImportName("github.com/jinzhu/copier", "copier")
	f.ImportName("github.com/gin-gonic/gin", "gin")
	f.ImportName("go.uber.org/zap", "zap")
	f.ImportName("metis/config/constant", "constant")
	f.ImportName("metis/database", "database")
	f.ImportName("metis/test/second/model/dto", "dto")
	f.ImportName("metis/test/second/model/entity", "entity")
	f.ImportName("metis/util", "util")
	f.ImportName("metis/util/logger", "logger")
	f.ImportName("strings", "strings")

	f.HeaderComment("Code generated by tabuyos. DO NOT EDIT!")
	f.PackageComment("Package entity")
	f.PackageComment("@author tabuyos")
	f.PackageComment("@since " + time.Now().Format("2006/01/02"))
	f.PackageComment("@description " + table)

	f.Add(genDeclEntityStruct(table, columns))
	f.Add(genDeclFuncNewAccount(table, columns))
	f.Add(genDeclFuncFrom(table, columns))
	f.Add(genDeclFuncInto(table, columns))
	return f
}

func TestEntity(t *testing.T) {
	strcase.ConfigureAcronym("ID", "id")
	strcase.ConfigureAcronym("id", "ID")

	table := "account"
	columns := getColumns(table)

	f := genEntityFile(table, columns)
	fmt.Printf("%#v\n", f)
	autogenFilePath := "second/model/entity/" + table + ".go"
	if err := os.MkdirAll(filepath.Dir(autogenFilePath), 0766); err != nil {
		panic(err)
	}
	wr, err := os.OpenFile(autogenFilePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		panic(err)
	}
	err = f.Render(wr)
}
